; section drawTank
drawTank
    LDX     #$02
;    x=2 {
__label_3
;      screen+[TANK_START-ROW],x=a=0
    LDA     #$00
    STA     screen+130,X
;      screen+TANK_START,x=a=tank,x
    LDA     tank,X
    STA     screen+162,X
;      screen+[TANK_START+ROW],x=a=tank+3,x
    LDA     tank+3,X
    STA     screen+194,X
;      screen+[TANK_START+ROW*2],x=a=tank+6,x
    LDA     tank+6,X
    STA     screen+226,X
;      x--
    DEX
;    } >=0 
    BPL     __label_3
;  }
    RTS
; section drawJumpTank
drawJumpTank
    LDX     #$02
;    x=2 {
__label_4
;      screen+[TANK_START-ROW],x=a=tank,x
    LDA     tank,X
    STA     screen+130,X
;      screen+TANK_START,x=a=tank+3,x
    LDA     tank+3,X
    STA     screen+162,X
;      screen+[TANK_START+ROW],x=a=tank+6,x
    LDA     tank+6,X
    STA     screen+194,X
;      screen+[TANK_START+ROW*2],x=a=0
    LDA     #$00
    STA     screen+226,X
;      x--
    DEX
;    } >=0 
    BPL     __label_4
;  }
    RTS
; section nmi
nmi
    INC     RTCLOK
;    RTCLOK++
;    
;    phr vbi plr
	; inlined phr
__I2phr
    PHA
    TXA
    PHA
    TYA
    PHA
	; end of inlined phr
	; inlined vbi
__I3vbi
    LDA     tankJumpCounter
	BEQ	__I3__label_7
    JSR     drawJumpTank
    DEC     tankJumpCounter
	JMP	__I3__label_8
__I3__label_7
    JSR     drawTank
    LDA     RANDOM
    CMP     #$07
	BNE	__I3__label_9
    LDA     #$32
    STA     tankJumpCounter
__I3__label_9
__I3__label_8
    LDA     RTCLOK
    AND     #$03
	BNE	__I3__label_10
__I3__I1animTank
    LDX     #$02
__I3__I1__label_5
    LDA     tank_base,X
    STA     tank+6,X
    DEX
	BPL	__I3__I1__label_5
    LDX     tankAnimStep
    LDA     #$00
    STA     tank+6,X
    DEX
	BPL	__I3__I1__label_6
    LDX     #$02
__I3__I1__label_6
    STX     tankAnimStep
__I3__label_10
	; end of inlined vbi
	; inlined plr
__I4plr
    PLA
    TAY
    PLA
    TAX
    PLA
	; end of inlined plr
;  
;    return_i
    RTI
;  }
; section clearScreen
clearScreen
    LDX     #$00
;    x=0 { screen,x=a=0 screen+0x100,x=a x++ } !=   
__label_12
    LDA     #$00
    STA     screen,X
    STA     screen+256,X
    INX
    BNE     __label_12
;  }
    RTS
; section init
init
	; inlined pause
__I5pause
    LDA     RTCLOK
__I5__label_2
    CMP     RTCLOK
	BEQ	__I5__label_2
	; end of inlined pause
;    pause i+ DMACTL=NMIEN=a=0
    SEi
    LDA     #$00
    STA     NMIEN
    STA     DMACTL
;  
;    moveCharset CHBASE=a=&>newCharset PORTB=a=0xFE
	; inlined moveCharset
__I6moveCharset
    LDX     #$00
__I6__label_11
    LDA     orgCharset,X
    STA     newCharset,X
    LDA     orgCharset+256,X
    STA     newCharset+256,X
    LDA     orgCharset+512,X
    STA     newCharset+512,X
    LDA     orgCharset+768,X
    STA     newCharset+768,X
    INX
	BNE	__I6__label_11
	; end of inlined moveCharset
    LDA     #>(newCharset)
    STA     CHBASE
    LDA     #$FE
    STA     PORTB
;  
;    DLISTL=a=&<dl DLISTH=a=&>dl
    LDA     #<(dl)
    STA     DLISTL
    LDA     #>(dl)
    STA     DLISTH
;    NMIADL=a=&<nmi NMIADH=a=&>nmi
    LDA     #<(nmi)
    STA     NMIADL
    LDA     #>(nmi)
    STA     NMIADH
;  
;    clearScreen initVariables
    JSR     clearScreen
	; inlined initVariables
__I7initVariables
    LDA     #$00
    STA     tankAnimStep
    STA     tankJumpCounter
	; end of inlined initVariables
;    
;    DMACTL=a=0b00100001
    LDA     #$21
    STA     DMACTL
;    NMIEN=a=0x40
    LDA     #$40
    STA     NMIEN
;  }
    RTS
; section main
main
    JSR     init
;    init
;  
;    {} always
__label_13
    JMP     __label_13
;  }
; section tank
tank
    .byte     #$42
;    0x42 0x55 0x4E
    .byte     #$55
    .byte     #$4E
;    0x55 0x80 0x55
    .byte     #$55
    .byte     #$80
    .byte     #$55
;    0x3C 0x3F 0x0F
    .byte     #$3C
    .byte     #$3F
    .byte     #$0F
;  }
; section tank_base
tank_base
    .byte     #$3C
;    0x3C 0x3F 0x0F
    .byte     #$3F
    .byte     #$0F
;  }
; section dl
dl
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
    .byte   #$70
;    nocross
;    for x=1..10 eval [ 0x70 ]
;    0x42 &<screen &>screen
    .byte     #$42
    .byte     #<(screen)
    .byte     #>(screen)
;    for x=1..8 eval [ 2 ]
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$02
;    0x41 &<dl &>dl
    .byte     #$41
    .byte     #<(dl)
    .byte     #>(dl)
;  }
